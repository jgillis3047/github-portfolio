class LogicGate:
def __init__(self, n):
self.name=n
self.output=None
def getName(self):
return self.name
def getOutput(self):
return self.output
class BinaryGate(LogicGate):
def __init__(self, n):
LogicGate.__init__(self,n)
self.pinA=None
self.pinB=None
def getPinA(self):
if self.pinA == None:
return int (input("Enter PinA input for gate " + self.getName() + " → "))
else:
self.pinA.getFrom().getOutput()
def getPinB(self):
if self.pinB == None:
return int (input("Enter PinB input for gate " + self.getName() + " → "))
else:
self.pinB.getFrom().getOutput()
def setNextPin(self, source):
if self.pinA == None:
self.pinA=source
else:
if self.pinB==None:
self.pinB=source
else:
print("Cannot Connect: No empty pins on this gate.")
class AndGate(BinaryGate):
def__init__(self, n):
BinaryGate.__init__(self, n)
def performGateLogic(self):
a=self.getPinA()
b=self.getPinB()
if a==1 and b==1:
return 1
else:
return 0
class NandGate(AndGate):
def__init__(self, n):
AndGate.__init__(self, n)
def performGateLogic(self):
andResult=AndGate.performGateLogic(self)
if andResult==1:
return 0
else:
return 1
class OrGate(BinaryGate):
def__init__(self, n):
BinaryGate.__init__(self, n)
def performGateLogic(self):
a=self.getPinA()
b=self.getPinB()
if a==1 or b==1:
return 1
else:
return 0
class NorGate(OrGate):
def__init__(self, n):
OrGate.__init__(self, n)
def performGateLogic(self):
orResult=OrGate.performGateLogic(self)
if orResult==1:
return 0
else:
return 1
class UnaryGate(LogicGate)
def__init__(self, n):
LogicGate.__init__(self, n)
self.pin=None
def getPin(self):
if self.pin == None:
return int(input( "Enter Pin input for gate " + self.getName() + " → "))
else:
self.pin.getFrom().getOutput()
def setNextPin(self, source):
if self.pin == None:
self.pinA=source
else:
print("Cannot Connect: No empty pins on this gate.")
class NotGate(UnaryGate):
def__init__(self, n):
UnaryGate.__init__(self, n)
def performGateLogic(self):
if self.getPin():
return 0
else:
return 1
class Connector
def__init__(self,fgate,tgate):
self.fromgate=fgate
self.togate=tgate
tgate.setNextPin(self)
def getFrom(self)
return self.fromgate
def getTo(self)
return self.togate
def main():
g1=AndGate("G1")
g2=AndGate("G2")
g3=OrGate("G3")
g4=NotGate('G4")
c1=Connector(g1,g3)
c2=Connector(g2,g3)
c3=Connector(g3.g4)
print(g4.getOutput())
#main()
print("\n\n---------------------- Checking NandGate functionality --------------- \n\n")
g1=NandGate("G1")
print("Result: ",g1.performGateLogic(), "\n")
print("\n\n---------------------- Checking NorGate functionality --------------- \n\n")
g2=NorGate("G2")
print("Result: ",g2.performGateLogic(), "\n")
OUTPUT:
---------------------- Checking NandGate functionality ---------------
Enter PinA input for gate G1 → 1
Enter PinB input for gate G1 → 0
Result: 1
---------------------- Checking NorGate functionality -----------------
Enter PinA input for gate G2 → 1
Enter PinB input for gate G2 → 0
Process finished with exit code 0
3. AndGate class inherits the method for both the pins from BinaryGate class i.e get PinA() and
get PinB() methods which are defined in BinaryGate class will now be available for use within
the AndGate class.
